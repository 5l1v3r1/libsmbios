#!/usr/bin/python
# vim:expandtab:autoindent:tabstop=4:shiftwidth=4:filetype=python:tw=0

  #############################################################################
  #
  # Copyright (c) 2005 Dell Computer Corporation
  # Dual Licenced under GNU GPL and OSL
  #
  #############################################################################
"""dumpCmos"""

from __future__ import generators

# import arranged alphabetically
import ctypes
import gettext
import locale
import os
import struct
import sys
import time
import traceback

# the following vars are all substituted on install
# this bin isnt byte-compiled, so this is ok
RELEASE_VERSION="uninstalled-version"
pythondir=os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), "..", "python")
clidir=os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), "..", "py-cli")
# end vars

# import all local modules after this.
sys.path.insert(0,pythondir)
sys.path.insert(0,clidir)
__VERSION__=RELEASE_VERSION

import cli
from libsmbios_c import smbios, token, localedir, GETTEXT_PACKAGE

locale.setlocale(locale.LC_ALL, '')
gettext.install(GETTEXT_PACKAGE, localedir, unicode=1)

class CmdlineError(Exception): pass

RBU_SMBIOS_STRUCT = 0xDE
TOKEN_RBU_CANCEL = 0x005d
TOKEN_RBU_STAGE  = 0x005c

completion_messages = {
    0x0000: _("The update was completed successfully."),
    0x0001: _("The image failed one or more consistency checks."),
    0x0002: _("The BIOS could not access the flash-memory device."),
    0x0003: _("The flash-memory device was not ready when an erase was attempted."),
    0x0004: _("Flash programming is currently disabled on the system, or the voltage is low."),
    0x0005: _("A battery must be installed for the operation to complete."),
    0x0006: _("A fully-charged battery must be present for the operation to complete."),
    0x0007: _("An external power adapter must be connected for the operation to complete."),
    0x0008: _("The 12V required to program the flash-memory could not be set."),
    0x0009: _("The 12V required to program the flash-memory could not be removed."),
    0x000A: _("A flash-memory failure occurred during a block-erase operation."),
    0x000B: _("A general failure occurred during the flash programming."),
    0x000C: _("A data miscompare error occurred during the flash programming."),
    0x000D: _("The image could not be found in memory, i.e. the header could not be located."),
    0xFFFF: _("No update operation has been performed on the system."),
}

failmessage = _("""
Common problems are:

    -- Insufficient permissions to perform operation.
       Try running as a more privileged account.
          Linux  : run as 'root' user
          Windows: run as 'administrator' user

    -- dell_rbu device driver not loaded.
       Try loading the dell_rbu driver
          Linux  : modprobe dell_rbu
          Windows: dell_rbu driver not yet available.
""")

def command_parse():
    parser = cli.OptionParser(usage=__doc__, version=__VERSION__)
    parser.add_option('--hdr', metavar="HDR_FILE", action="store", default=None, help= _("The BIOS update file (.HDR file)"))
    parser.add_option('--hdr-info', metavar="HDR_FILE", action="append", default=[], help= _("Show information about a given BIOS HDR file"))
    parser.add_option('--system-info', action="store_const", const="system_info", dest="action", default=None, help= _("Show system information and RBU completion codes"))
    parser.add_option('--cancel', action="store_const", const="cancel", dest="action", help= _("Cancel pending BIOS update"))
    parser.add_option('--update', action="store_const", const="update", dest="action", help= _("Stage BIOS for update at next reboot"))
    parser.add_option('--test', action="store_const", const="test", dest="action", help= _("Test HDR file to see if it is appropriate for this system"))

    parser.add_option('--auto-detect-mode', action="store_const", const="auto", dest="update_mode", default="auto", help= _("Automatically select the optimal update mode (default, recommended)"))
    parser.add_option('--force-packet-mode', action="store_const", const="packet", dest="update_mode", help= _("Force update to use packet-mode"))
    parser.add_option('--force-mono-mode', action="store_const", const="mono", dest="update_mode", help= _("Force update to use monolithic-mode"))

    parser.add_option('--override-version-check', action="store_false", dest="check_bios_version", default=True, help= _("Allow BIOS downgrades and re-flash"))
    parser.add_option('--override-sysid-check', action="store_false", dest="check_sysid", default=True, help= _("Disable check for system-id (Dangerous)"))
    cli.addStdOptions(parser)
    options, args = parser.parse_args()

    if len(args) == 1 and options.hdr is None:
        options.hdr = args[0]

    return options,args

def getNum(s, off, len):
    retval = 0
    try:
        t = list(struct.unpack( 'B' * len, s.getData(off, len) ))
        t.reverse()
        for i in t:
            retval = (retval << 8) | i
    except IndexError, e:
        pass
    return retval

def getCompletion(struct_0xDE):
    return (getNum(struct_0xDE, 0x06, 2), completion_messages[getNum(struct_0xDE, 0x06, 2)])

def getRbuLastUpdate(struct_0xDE):
    return {
        "year": getNum(struct_0xDE, 0x08, 1),
        "month": getNum(struct_0xDE, 0x09, 1),
        "day": getNum(struct_0xDE, 0x0a, 1),
        "hour": getNum(struct_0xDE, 0x0b, 1),
        "minute": getNum(struct_0xDE, 0x0c, 1),
        }

def getUpdateModes(struct_0xDE):
    modes = [ "MONOLITHIC" ]
    characteristics = getNum(struct_0xDE, 0x0f, 1)
    if characteristics & 0x01:
        modes.append("PACKET")
    return modes

def system_info():
    table = smbios.SmbiosTable()
    s = table[RBU_SMBIOS_STRUCT]

    print _("RBU Update information:")
    print _("\tMinimum size: %d") % getNum(s, 0x04, 2)
    print _("\tCompletion Code: %d") %  getCompletion(s)[0]
    print _("\tCompletion Message:\n\t\t%s") %  getCompletion(s)[1]
    print _("\tLast Update Date - Year  : %02x") % getRbuLastUpdate(s)["year"]
    print _("\tLast Update Date - Month : %02x") % getRbuLastUpdate(s)["month"]
    print _("\tLast Update Date - Day   : %02x") % getRbuLastUpdate(s)["day"]
    print _("\tLast Update Date - time  : %02x:%02x") % (getRbuLastUpdate(s)["hour"], getRbuLastUpdate(s)["minute"])
    print _("\tBoot Feature Flags: 0x%08x") % getNum(s, 0x0d, 2)
    print _("\tCharacteristics: 0x%04x") % getNum(s, 0x0f, 1)
    print _("\tUpdate modes supported: %s") % ", ".join(getUpdateModes(s))

def updateBios(filename):
    pass

def cancelUpdate():
    print _("Cancelling BIOS update...")
    table = token.TokenTable()
    table[TOKEN_RBU_CANCEL].activate()
    print _("BIOS update cancelled.")

def dumpDataToFile(filename, data, wait=False):
    while wait and not os.file.exists(filename):
        time.sleep(0.1)
    fh = open(filename, "wb")
    fh.write(data)
    fh.close()

def stream():
    pass

class HdrFile(ctypes.Structure):
    __pack__ = 1
    __fields__ = [
        #char headerId[4];
        ("headerId", ctypes.c_char * 4),

        #u8  headerLength;
        ("headerLength", ctypes.c_uint8),

        #u8  headerMajorVer;
        ("headerMajorVer", ctypes.c_uint8),

        #u8  headerMinorVer;
        ("headerMinorVer", ctypes.c_uint8),

        #u8  numSystems;
        ("numSystems", ctypes.c_uint8),

        #char quickCheck[40];
        ("quickCheck", ctypes.c_char * 40),

        #char biosVersion[3];
        ("biosVersion", ctypes.c_char * 3),

        #u8  miscFlags;
        ("miscFlags", ctypes.c_uint8),

        #u8  biosInternalUse;
        ("biosInternalOnly", ctypes.c_uint8),

        #u8  reserved[5];
        ("biosInternalOnly", ctypes.c_uint8 * 5),

        #u16 compatFlags;
        ("compatFlags", ctypes.c_uint16),

        #u16 systemIdList[NUM_SYS_ID_IN_HDR];
        ("systemIdList", ctypes.POINTER(ctypes.c_uint16)),

# Contains the list of NumSystems Dell System ID and Hardware Revision
# ID pairs for which the Image Data is valid, in the following format:
#
# Bit Range  Description
# 15:11      Dell System ID, bits 12:8.
#               This range is set to 00000b if the Dell System ID
#               is a 1-byte value.
# 10:8       Hardware Revision ID
# 7:0        Dell System ID, bits 7:0.
        ]

class BaseRbu(object):
    def __init__(self, filename):
        self.hdrfile = filename

class MonolithicRbu_v3(BaseRbu):
    sysbasedir = "/sys/devices/platform/dell_rbu/"
    img_type_file = "/sys/devices/platform/dell_rbu/image_type"
    pkt_size_file = "/sys/devices/platform/dell_rbu/packet_size"
    fw_data_file = "/sys/class/firmware/dell_rbu/data"
    fw_load_file = "/sys/class/firmware/dell_rbu/loading"

    def doUpdate(self):
        pass
        #self.setLoadValue('1')
        # open fw_data_file "wb"
        # copy data from hdrfile to kernel
        # close
        #self.setLoadValue('0')

def main():
    exit_code = 0
    (options, args) = command_parse()
    cli.setup_std_options(options)

    if options.action == "system_info":
        try:
            system_info()
        except IndexError, e:
            print _("RBU is not supported on this system.")
        except smbios.TableParseError, e:
            print _("\nERROR: Could not parse system SMBIOS table.")
            print _("\nThe smbios library returned this error:")
            print str(e)
            print
            print failmessage

    elif options.action == "cancel":
        cancelUpdate()
    elif options.action == "update":
        exit_code=1
        print _("Update mode not yet implemented... use dellBiosUpdate")
    elif options.action == "test":
        exit_code=1
        print _("Test mode not yet implemented... use dellBiosUpdate")

    return exit_code

if __name__ == "__main__":
    sys.exit( main() )

