#!/usr/bin/python
# vim:expandtab:autoindent:tabstop=4:shiftwidth=4:filetype=python:tw=0

  #############################################################################
  #
  # Copyright (c) 2005 Dell Computer Corporation
  # Dual Licenced under GNU GPL and OSL
  #
  #############################################################################
"""dumpCmos"""

from __future__ import generators

# import arranged alphabetically
import gettext
import locale
import os
import struct
import sys
import traceback

# the following vars are all substituted on install
# this bin isnt byte-compiled, so this is ok
RELEASE_VERSION="uninstalled-version"
GETTEXT_PACKAGE="libsmbios" #replaced
pythondir=os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), "..", "python")
localedir=os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), "..", "..", "po")
clidir=os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), "..", "py-cli")
# end vars

# import all local modules after this.
sys.path.insert(0,pythondir)
sys.path.insert(0,clidir)
__VERSION__=RELEASE_VERSION

import cli
import libsmbios_c.smbios as smbios

locale.setlocale(locale.LC_ALL, '')
gettext.install(GETTEXT_PACKAGE, localedir, unicode=1)

class CmdlineError(Exception): pass

completion_messages = {
    0x0000: _("The update was completed successfully."),
    0x0001: _("The image failed one or more consistency checks."),
    0x0002: _("The BIOS could not access the flash-memory device."),
    0x0003: _("The flash-memory device was not ready when an erase was attempted."),
    0x0004: _("Flash programming is currently disabled on the system, or the voltage is low."),
    0x0005: _("A battery must be installed for the operation to complete."),
    0x0006: _("A fully-charged battery must be present for the operation to complete."),
    0x0007: _("An external power adapter must be connected for the operation to complete."),
    0x0008: _("The 12V required to program the flash-memory could not be set."),
    0x0009: _("The 12V required to program the flash-memory could not be removed."),
    0x000A: _("A flash-memory failure occurred during a block-erase operation."),
    0x000B: _("A general failure occurred during the flash programming."),
    0x000C: _("A data miscompare error occurred during the flash programming."),
    0x000D: _("The image could not be found in memory, i.e. the header could not be located."),
    0xFFFF: _("No update operation has been performed on the system."),
}

failmessage = _("""
Common problems are:

    -- Insufficient permissions to perform operation.
       Try running as a more privileged account.
          Linux  : run as 'root' user
          Windows: run as 'administrator' user

    -- dell_rbu device driver not loaded.
       Try loading the dell_rbu driver
          Linux  : modprobe dell_rbu
          Windows: dell_rbu driver not yet available.
""")

def command_parse():
    parser = cli.OptionParser(usage=__doc__, version=__VERSION__)
    parser.add_option('--system-info', action="store_true", default=False, help= _("Show system information and RBU completion codes)"))
    cli.addStdOptions(parser)
    return parser.parse_args()

def getNum(s, off, len):
    retval = 0
    try:
        t = list(struct.unpack( 'B' * len, s.getData(off, len) ))
        t.reverse()
        for i in t:
            retval = (retval << 8) | i 
    except IndexError, e:
        pass
    return retval

def getCompletion(struct_0xDE):
    return (getNum(struct_0xDE, 0x06, 2), completion_messages[getNum(struct_0xDE, 0x06, 2)])

def getRbuLastUpdate(struct_0xDE):
    return { 
        "year": getNum(struct_0xDE, 0x08, 1),
        "month": getNum(struct_0xDE, 0x09, 1),
        "day": getNum(struct_0xDE, 0x0a, 1),
        "hour": getNum(struct_0xDE, 0x0b, 1),
        "minute": getNum(struct_0xDE, 0x0c, 1),
        }

def getUpdateModes(struct_0xDE):
    modes = [ "MONOLITHIC" ]
    characteristics = getNum(struct_0xDE, 0x0f, 1)
    if characteristics & 0x01:
        modes.append("PACKET")
    return modes

def info():
    table = smbios.SmbiosTable()
    s = table[0xDE]

    print _("RBU Update information:")
    print _("\tMinimum size: %d") % getNum(s, 0x04, 2)
    print _("\tCompletion Code: %d") %  getCompletion(s)[0]
    print _("\tCompletion Message:\n\t\t%s") %  getCompletion(s)[1]
    print _("\tLast Update Date - Year  : %02x") % getRbuLastUpdate(s)["year"]
    print _("\tLast Update Date - Month : %02x") % getRbuLastUpdate(s)["month"]
    print _("\tLast Update Date - Day   : %02x") % getRbuLastUpdate(s)["day"]
    print _("\tLast Update Date - time  : %02x:%02x") % (getRbuLastUpdate(s)["hour"], getRbuLastUpdate(s)["minute"])
    print _("\tBoot Feature Flags: 0x%08x") % getNum(s, 0x0d, 2)
    print _("\tCharacteristics: 0x%04x") % getNum(s, 0x0f, 1)
    print _("\tUpdate modes supported: %s") % ", ".join(getUpdateModes(s))

def main():
    exit_code = 0
    (options, args) = command_parse()
    cli.setup_std_options(options)

    if options.system_info:
        try:
            info()
        except IndexError, e:
            print _("RBU is not supported on this system.")
        except smbios.TableParseError, e:
            print _("\nERROR: Could not parse system SMBIOS table.")
            print _("\nThe smbios library returned this error:")
            print str(e)
            print
            print failmessage

    return exit_code

if __name__ == "__main__":
    sys.exit( main() )

